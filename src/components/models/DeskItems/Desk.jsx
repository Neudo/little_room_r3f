/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, {useEffect, useRef, useState} from "react";
import {useGLTF, useAnimations, Outlines, useCursor} from "@react-three/drei";
import {LoopOnce} from "three";
import {useFrame} from "@react-three/fiber";


export default function Desk(props) {
    const group = useRef();
    const { nodes, materials, animations } = useGLTF("./glb/deskFinal.glb");
    const { actions } = useAnimations(animations, group);
    const [deskBottomIsOpen, setDeskBottomIsOpen] = useState(false);
    const [deskUpperIsOpen, setDeskUpperIsOpen] = useState(false);
    const [deskIsHovered, setDeskIsHovered] = useState(false);
    const upperDeskRef = useRef();


    useEffect(() => {
        document.body.style.cursor = deskIsHovered ? 'pointer' : 'auto'
    }, [deskIsHovered])

    const handleBottomDesk = () => {
        if (deskBottomIsOpen) {
            closeBottomDesk();
            setDeskBottomIsOpen(false);
        } else {
            openBottomDesk();
            setDeskBottomIsOpen(true);
        }
    }
    const openBottomDesk = () => {
        actions.openBottomDesk.reset();
        actions.closeBottomDesk.stop();
        actions.openBottomDesk.setLoop(LoopOnce, 1);
        actions.openBottomDesk.clampWhenFinished = true;
        actions.openBottomDesk.play();
    }
    const closeBottomDesk = () => {
        actions.closeBottomDesk.setLoop(LoopOnce, 1);
        actions.closeBottomDesk.clampWhenFinished = true;
        actions.openBottomDesk.stop();
        actions.closeBottomDesk.play();
    }
    const handleUpperDesk = () => {
        if (deskUpperIsOpen) {
            closeUpperDesk();
            setDeskUpperIsOpen(false);
        } else {
            openUpperDesk();
            setDeskUpperIsOpen(true);
        }
    }
    const openUpperDesk = () => {
        actions.openUpperDesk.reset();
        actions.closeUpperDesk.stop();
        actions.openUpperDesk.setLoop(LoopOnce, 1);
        actions.openUpperDesk.clampWhenFinished = true;
        actions.openUpperDesk.play();
    }
    const closeUpperDesk = () => {
        actions.closeUpperDesk.setLoop(LoopOnce, 1);
        actions.closeUpperDesk.clampWhenFinished = true;
        actions.openUpperDesk.stop();
        actions.closeUpperDesk.play();
    }




    return (
        <group
            ref={group}
            {...props}
            dispose={null}>
            <group name="Scene">
                <group name="Sketchfab_model"
                       rotation={[-Math.PI / 2, 0, -Math.PI * .5]}
                       position={[1.95, 0, 0]}
                       scale-x={1.5}
                       scale-y={1.9}
                >
                    <group name="root">
                        <group name="GLTF_SceneRootNode" rotation={[Math.PI / 2, 0, 0]}>
                            <group name="#TBL0003_Desk_140x60_Gray_0">
                                <mesh
                                    name="Object_4"
                                    castShadow
                                    receiveShadow
                                    geometry={nodes.Object_4.geometry}
                                    material={materials.TBL0003_Desk}
                                />
                            </group>
                            <group name="#TBL0003_Door_2" position={[0.697, 0.233, 0.265]}>
                                <mesh
                                    name="Object_8"
                                    castShadow
                                    receiveShadow
                                    geometry={nodes.Object_8.geometry}
                                    material={materials.TBL0003_Desk}
                                    onClick={handleBottomDesk}
                                    onPointerOver={() => setDeskIsHovered(true)}
                                    onPointerOut={() => setDeskIsHovered(false)}
                                />
                            </group>
                            <group name="#TBL0003_Drawer_1" position={[0.5, 0.543, 0.265]}>
                                <mesh
                                    name="Object_6"
                                    castShadow
                                    receiveShadow
                                    geometry={nodes.Object_6.geometry}
                                    material={materials.TBL0003_Desk}
                                    onClick={handleUpperDesk}
                                    ref={upperDeskRef}
                                    onPointerOver={() => setDeskIsHovered(true)}
                                    onPointerOut={() => setDeskIsHovered(false)}

                                />
                            </group>
                        </group>
                    </group>
                </group>
            </group>
        </group>
    );
}

useGLTF.preload("./glb/deskFinal.glb");
